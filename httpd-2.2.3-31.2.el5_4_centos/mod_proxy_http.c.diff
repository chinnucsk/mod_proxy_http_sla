--- mod_proxy_http.c.STOCK	2010-03-31 17:15:14.000000000 -0600
+++ mod_proxy_http.c	2010-06-28 15:43:20.000000000 -0600
@@ -24,6 +24,14 @@
                                           request_rec *r,
                                           proxy_conn_rec *backend);
 
+/* Neal's SLA Hack prototypes for new functions */
+static int ap_proxy_suppress_errors_check(request_rec *r);
+static int ap_proxytimeout_default_response(request_rec *r,  const char *headers_path, const char *document_path);
+static int ap_proxy_connection_setup_custom_timeout(request_rec *r,  proxy_conn_rec *backend, 
+                        apr_interval_time_t * new_timeout, apr_interval_time_t * old_timeout);
+static int ap_proxytimeout_custom_error_handler(request_rec *r, int current_status);
+
+
 /*
  * Canonicalise http-like URLs.
  *  scheme is the scheme for the URL
@@ -1389,6 +1397,18 @@
                          "proxy: HTTP: received interim %d response",
                          r->status);
         }
+
+        /* Neal's SLA Hack to suppress errors */
+        /* Altered 6/28/2010 
+             - add parameterization of allowed status codes ; 2xx,3xx & 4xx are default 
+             - add Server response header pattern check
+        */
+        if (ap_proxy_suppress_errors_check(r) && ((r->status != DONE) && (r->status != OK))) {
+            ap_log_error(APLOG_MARK, APLOG_DEBUG, 0, r->server,
+                             "proxy: ((tRP SLAHack)) found bad response, throwing HTTP_BAD_GATEWAY");
+            return ap_proxyerror(r, HTTP_BAD_GATEWAY, "Suppressing error");
+        }
+
         /* Moved the fixups of Date headers and those affected by
          * ProxyPassReverse/etc from here to ap_proxy_read_headers
          */
@@ -1589,6 +1609,243 @@
     return OK;
 }
 
+/* Neal's SLA Hack This really should be in proxy_util or utilize some built in function 
+ * Handles the on-error default response 
+ * Improvements?:
+ *   - setup redirect/forward to mod_asis?
+ *   - do a std redirection?
+ */
+static int ap_proxytimeout_default_response(request_rec *r,  const char *headers_path, const char *document_path)
+{
+    apr_status_t rv;
+    apr_file_t *hfd = NULL;
+    char *headers_filename = NULL;
+    
+    if ((headers_path == NULL) || (document_path == NULL)) 
+       return OK; //HTTP_BAD_REQUEST?
+
+    headers_filename = apr_psprintf(r->pool, "%s%s", ap_document_root(r), headers_path);
+
+    r->uri = apr_psprintf(r->pool, "%s", document_path);
+    r->filename = apr_psprintf(r->pool, "%s%s", ap_document_root(r), document_path);
+
+    if ((rv = apr_file_open(&hfd, headers_filename, APR_READ, APR_OS_DEFAULT, r->pool)) != APR_SUCCESS) {
+        ap_log_rerror(APLOG_MARK, APLOG_ERR, rv, r,
+                    "error reading file: %s", headers_filename);
+        return OK; //HTTP_BAD_REQUEST?
+    }
+
+    ap_scan_script_header_err(r,hfd, NULL);
+    apr_file_close(hfd);
+
+    /* Internal redirect -- fake-up a pseudo-request */
+    //r->status = HTTP_OK;
+
+    /* This redirect needs to be a GET no matter what the original
+     * method was.
+     */
+    r->method = apr_pstrdup(r->pool, "GET");
+    r->method_number = M_GET;
+
+    ap_internal_redirect_handler(document_path, r);
+        
+    return OK;
+}
+
+/* Neal's SLA Hack This really should be in proxy_util or utilize some built in function 
+ * Hat-tip Ronald Park for example implementation in apache 2.0.63 
+ */
+static int ap_proxy_connection_setup_custom_timeout(request_rec *r,  proxy_conn_rec *backend, 
+                        apr_interval_time_t * new_timeout, apr_interval_time_t * old_timeout)
+{
+        // Ronald Park's comments from an apache 2.0 patch
+        // pre_connection code sets the socket timeout as
+        // the value of Timeout which is the timeout of the
+        // original request; by the time that is hit, our client
+        // has already been given a timeout
+        //
+        // instead, we'll look to see if an env var, proxy-timeout,
+        // has been set: if so, we use it; otherwise, we use
+        // the setting for ProxyTimeout (if set); (otherwise, we
+        // will stick with the value of Timeout.)
+        const char* tbl_timeout;
+
+        tbl_timeout = apr_table_get(r->subprocess_env, "proxy-timeout");
+        if (tbl_timeout == NULL) {
+            tbl_timeout = apr_table_get(r->notes, "proxy-timeout");
+        }
+        if (tbl_timeout != NULL) {
+            int int_timeout = atoi(tbl_timeout);
+            int factor = 1;
+            if (int_timeout > 0) {
+               if(strstr(tbl_timeout,"us") != NULL)
+                  factor = 1;
+               else if(strstr(tbl_timeout,"ms") != NULL)
+                  factor = (APR_USEC_PER_SEC/1000);
+               else //assume seconds
+                  factor = APR_USEC_PER_SEC;
+
+               *new_timeout = apr_time_make(0,int_timeout * factor);
+            }
+        }
+        else //no setting
+	   return OK;   
+        
+        if (*new_timeout > 0) {
+            apr_socket_timeout_get(backend->sock, old_timeout);
+            apr_socket_timeout_set(backend->sock, *new_timeout);
+            ap_log_error(APLOG_MARK, APLOG_DEBUG, 0, r->server,
+                     "proxy: ((tRP SLAHack)) setting request timeout (%d) from (%d)", (int)*new_timeout, (int)*old_timeout);
+        }
+        else
+        {   
+            apr_interval_time_t ct = -1;
+            apr_socket_timeout_get(backend->sock, &ct);
+            ap_log_error(APLOG_MARK, APLOG_DEBUG, 0, r->server,
+                     "proxy: ((tRP SLAHack)) keeping timeout (%d) new: (%d)", (int)ct, (int)*new_timeout);
+        }
+
+	return OK;   
+}
+
+/* Neal's SLA Hack  
+ * check for error suppression = true on this request 
+   Altered 6/28/2010 
+             - add parameterization of allowed status codes ; 2xx,3xx & 4xx are default 
+             - add Server response header pattern check
+ */
+static int ap_proxy_suppress_errors_check(request_rec *r)
+{
+    //on-error suppress errors switch
+    const char* conf_error_suppress = NULL;
+    conf_error_suppress = apr_table_get(r->subprocess_env, "error-suppress");
+    if (conf_error_suppress == NULL) {
+        conf_error_suppress = apr_table_get(r->notes, "error-suppress");
+    }
+
+    if(!((conf_error_suppress != NULL) && (strcasecmp(conf_error_suppress, "true")==0)))
+       return 0; //not active, return no error
+
+    ap_log_error(APLOG_MARK, APLOG_DEBUG, 0, r->server,
+                             "proxy: ((tRP SLAHack)) ap_proxy_suppress_errors_check() - status[%d]", r->status);
+
+    //fetch Server header
+    const char *server_header = NULL;
+    if ((server_header = apr_table_get(r->headers_out, "Server"))) {
+            ap_log_error(APLOG_MARK, APLOG_DEBUG, 0, r->server,
+                             "proxy: ((tRP SLAHack)) ap_proxy_suppress_errors_check() - Server[%s]", server_header);
+    }
+
+    //fetch server-pattern
+    const char* conf_server_pattern = NULL;
+    conf_server_pattern = apr_table_get(r->subprocess_env, "server-pattern");
+    if (conf_server_pattern == NULL) {
+        conf_server_pattern = apr_table_get(r->notes, "server-pattern");
+    }
+
+    //test server-pattern
+    if((server_header != NULL) && (conf_server_pattern != NULL) && (strcasestr(server_header, conf_server_pattern)==NULL))
+    {
+       ap_log_error(APLOG_MARK, APLOG_DEBUG, 0, r->server,
+                             "proxy: ((tRP SLAHack)) ERROR [%s] does not substring match [%s]", server_header,conf_server_pattern);
+       return 1; //fail, return error
+    }
+
+    //fetch allowed-statuses
+    const char* conf_allowed_statuses = NULL;
+    conf_allowed_statuses = apr_table_get(r->subprocess_env, "allowed-statuses");
+    if (conf_allowed_statuses == NULL) {
+        conf_allowed_statuses = apr_table_get(r->notes, "allowed-statuses");
+    }
+
+    //test allowed-statuses
+    if((conf_allowed_statuses != NULL) && ((r->status != DONE) && (r->status != OK)))
+    {
+       const char * status_str = apr_psprintf(r->pool, "%d", r->status);
+       const char * status_class = apr_psprintf(r->pool, "%dxx", (int)(r->status/100));
+
+       ap_log_error(APLOG_MARK, APLOG_DEBUG, 0, r->server,
+                             "proxy: ((tRP SLAHack)) allowed-statuses[%s] vs [%s] or [%s]", conf_allowed_statuses, status,status_class);
+
+       if( (status_str != NULL)   && (strcasestr(conf_allowed_statuses,status_str)==NULL) &&
+           (status_class != NULL) && (strcasestr(conf_allowed_statuses,status_class)==NULL) )
+       {
+          ap_log_error(APLOG_MARK, APLOG_DEBUG, 0, r->server,
+                             "proxy: ((tRP SLAHack)) ERROR [%d] does not match [%s]", r->status,conf_allowed_statuses);
+          return 1; //fail, return error
+       }
+    }
+    else if(!((r->status > 199) && (r->status < 500)))
+    {
+          ap_log_error(APLOG_MARK, APLOG_DEBUG, 0, r->server,
+                             "proxy: ((tRP SLAHack)) ERROR [%d] does not match [%s] (default)", r->status,"2xx;3xx;4xx");
+          return 1; //fail, return error
+    }
+
+    return 0;  //no error
+}
+
+/* Neal's SLA Hack This really should be in proxy_util or utilize some built in function 
+ * perform any custom error handling for this request 
+ */
+static int ap_proxytimeout_custom_error_handler(request_rec *r, int current_status)
+{
+    int new_status = 0;
+    int current_http_status = 0;
+    int new_http_status = 0;
+
+    if(current_status != OK)
+       current_http_status = current_status;
+    else
+       current_http_status = r->status;
+
+    //on-error suppress errors switch
+    const char* tbl_error_suppress = NULL;
+    tbl_error_suppress = apr_table_get(r->subprocess_env, "error-suppress");
+    if (tbl_error_suppress == NULL) {
+        tbl_error_suppress = apr_table_get(r->notes, "error-suppress");
+    }
+
+    if((tbl_error_suppress != NULL) && (strcasecmp(tbl_error_suppress, "true")==0)
+       && !((current_http_status > 199) && (current_http_status < 300))
+       && ((current_http_status != DONE) && (current_http_status != OK))){
+
+        const char* tbl_error_headers = NULL;
+        const char* tbl_error_document = NULL;
+
+        //on-error alternate headers
+        tbl_error_headers = apr_table_get(r->subprocess_env, "error-headers");
+        if (tbl_error_headers == NULL) {
+            tbl_error_headers = apr_table_get(r->notes, "error-headers");
+        }
+
+        //on-error alternate document
+        tbl_error_document = apr_table_get(r->subprocess_env, "error-document");
+        if (tbl_error_document == NULL) {
+            tbl_error_document = apr_table_get(r->notes, "error-document");
+        }
+
+        //augment response with new headers and document
+        if ((tbl_error_headers != NULL) && (tbl_error_document != NULL)) {
+	     new_status = ap_proxytimeout_default_response(r, tbl_error_headers, tbl_error_document);
+        }
+        else { // just suppress the error w/ 200 and no content
+             r->content_type = "text/plain"; 
+             ap_custom_response(r, HTTP_OK, "");
+             new_http_status = HTTP_OK;
+             r->status = new_http_status; 
+             new_status = OK;
+        }
+
+        ap_log_rerror(APLOG_MARK, APLOG_ERR, 0, r, "(tRP SLAHack) suppressed (%d), returned (%d) for [%s]",
+                 current_http_status, r->status, ((r->uri == NULL)? "NULL" : r->uri));
+    }
+    else //do nothing
+        new_status = current_status;
+
+    return new_status;
+}
+
 /*
  * This handles http:// URLs, and other URLs using a remote proxy over http
  * If proxyhost is NULL, then contact the server directly, otherwise
@@ -1610,6 +1867,8 @@
     const char *u;
     proxy_conn_rec *backend = NULL;
     int is_ssl = 0;
+    apr_interval_time_t old_timeout = 0;
+    apr_interval_time_t new_timeout = 0;
 
     /* Note: Memory pool allocation.
      * A downstream keepalive connection is always connected to the existence
@@ -1702,6 +1961,14 @@
             goto cleanup;
     }
 
+    /* Step Three b: Neal's SLA Hack - enforce URL specific proxy timeout */
+    if (backend->connection) {
+        old_timeout = (conf->timeout_set) ? conf->timeout : 0;
+        new_timeout = 0;
+
+        ap_proxy_connection_setup_custom_timeout(r, backend, &new_timeout, &old_timeout);
+    }
+
     /* Step Four: Send the Request */
     if ((status = ap_proxy_http_request(p, r, backend, backend->connection,
                                         conf, uri, url, server_portstr)) != OK)
@@ -1716,11 +1983,28 @@
     /* Step Six: Clean Up */
 
 cleanup:
+    /* Step Six a: Neal's SLA Hack - Enforce any custom error handling (on timeout or throwing HTTP_BAD_GATEWAY) */
+    if (backend) {
+        if (status != OK) {
+        ap_log_rerror(APLOG_MARK, APLOG_DEBUG, 0, r, "proxy: ((tRP SLAHack)) status before ap_proxytimeout_custom_error_handler() (%d), http (%d)",status, r->status);
+        status = ap_proxytimeout_custom_error_handler(r, status);
+        ap_log_rerror(APLOG_MARK, APLOG_DEBUG, 0, r, "proxy: ((tRP SLAHack)) status after ap_proxytimeout_custom_error_handler() (%d), http (%d)",status, r->status);
+        }
+    }
+
+    /* Step Six b: - Neal's SLA Hack - Reset before the connection is released */
+    if (backend) {
+       if((new_timeout > 0) && (old_timeout != new_timeout) && (old_timeout > 0))
+          apr_socket_timeout_set(backend->sock, old_timeout);
+    }
+
+    /* Step Six c: Clean Up */
     if (backend) {
         if (status != OK)
             backend->close = 1;
         ap_proxy_http_cleanup(proxy_function, r, backend);
     }
+
     return status;
 }
 
